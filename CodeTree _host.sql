-- phpMyAdmin SQL Dump
-- version 4.6.6deb5
-- https://www.phpmyadmin.net/
--
-- Host: localhost:3306
-- Generation Time: Oct 23, 2018 at 05:08 PM
-- Server version: 5.7.23-0ubuntu0.18.04.1
-- PHP Version: 7.2.10-0ubuntu0.18.04.1

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `CodeTree`
--

-- --------------------------------------------------------

--
-- Table structure for table `Admin`
--

CREATE TABLE `Admin` (
  `id` int(11) NOT NULL,
  `username` varchar(300) NOT NULL,
  `password` varchar(300) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `Admin`
--

INSERT INTO `Admin` (`id`, `username`, `password`) VALUES
(1, 'rkwap', '$5$rounds=535000$Diqho28kLFnLAoYI$mMOGmGm6FmVWzwF..RVd0D6y6LV6dDZZawQedoUaDT1');

-- --------------------------------------------------------

--
-- Table structure for table `Leaderboard`
--

CREATE TABLE `Leaderboard` (
  `id` int(11) NOT NULL,
  `u_id` int(11) NOT NULL,
  `q_id` int(11) NOT NULL,
  `correct` varchar(200) DEFAULT NULL,
  `incorrect` varchar(200) DEFAULT NULL,
  `done` int(11) DEFAULT NULL,
  `s_time` timestamp NULL DEFAULT NULL,
  `e_time` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Table structure for table `Questions`
--

CREATE TABLE `Questions` (
  `id` int(11) NOT NULL,
  `details` longtext,
  `s_point` longtext,
  `options` longtext,
  `answers` longtext,
  `title` varchar(300) DEFAULT NULL,
  `bonus` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `Questions`
--

INSERT INTO `Questions` (`id`, `details`, `s_point`, `options`, `answers`, `title`, `bonus`) VALUES
(1, '<p>#include &lt;stdio.h&gt;&nbsp;</p><p>int main()&nbsp;</p><p>{&nbsp;</p><p>int num1,num2;&nbsp;</p><p>float result;&nbsp;<br>&nbsp;</p>', '\'<p>char ch; //to store operator choice&nbsp;</p><p>printf(\"Enter the two numbers:\\n\");</p>\',\'<p>printf(\"Choose operation to perform (+,-,*,/,%):\");&nbsp;</p><p>scanf(\"%c\",&amp;ch);&nbsp;</p><p>result=0;&nbsp;</p>\',\'<p>{&nbsp;</p><p>case \"+\":&nbsp;</p><p>result=num1+num2;&nbsp;</p><p>break;&nbsp;</p><p>case \"-\":&nbsp;</p><p>result=num1-num2;&nbsp;</p><p>break;&nbsp;</p><p>case \"*\":&nbsp;</p><p>result=num1*num2;&nbsp;</p><p>break;&nbsp;</p><p>case \"/\":</p>\',\'<p><br>break;&nbsp;</p><p>case \"%\":&nbsp;</p><p>result=num1%num2;&nbsp;</p><p>break;&nbsp;</p><p>default:&nbsp;</p><p>printf(\"Invalid operation.\\n\");&nbsp;</p><p>}&nbsp;</p>\'', '[\'<p>scanf(\"%d,%d\",&amp;num1,&amp;num2);</p>\',\'<p>scanf(\"%d%d\",&amp;num1,&amp;num2);</p>\',\'<p>scanf(\"%d %d\",&amp;num1,&amp;num2);</p>\'],[\'<p>switch(ch)</p>\',\'<p>switch(char ch)</p>\',\'<p>switch(\"ch\")</p>\'],[\'<p>result=(float)num1/(float)num2;</p>\',\'<p>result=(float)(num1/num2);</p>\',\'<p>result=(float num1)/(float num2);</p>\'],[\'<p>printf(\"Result: %d %c %d = %f\\n\",num1,ch,num2,result);</p>\',\'<p>printf(\"Result: %f %c %f = %d\\n\",num1,ch,num2,result);</p>\',\'<p>printf(\"Result: %d %c %d = %d\\n\",num1,ch,num2,result);</p>\']', '\'<p>scanf(\"%d%d\",&amp;num1,&amp;num2);</p>\',\'<p>switch(ch)</p>\',\'<p>result=(float)num1/(float)num2;</p>\',\'<p>printf(\"Result: %d %c %d = %f\\n\",num1,ch,num2,result);</p>\'', 'Basic Binary Calculator', NULL),
(2, '<p>#include&lt;stdio.h&gt;&nbsp;</p><p>int main()&nbsp;</p><p>{&nbsp;</p><p>int n;&nbsp;<br>&nbsp;</p>', '\'<p>printf(\"Enter number whose fatorial is to be calculated: \");&nbsp;</p><p>scanf(\"%d\",&amp;n);</p>\',\'<p>getch();&nbsp;</p><p>}</p>\',\'<p>{</p>\',\'<p>{&nbsp;</p><p>n*=fact(n-1);&nbsp;</p><p>}&nbsp;</p><p>if(n!=0)&nbsp;</p><p>{&nbsp;<br>&nbsp;</p>\',\'<p>}&nbsp;</p><p>else if(n==0)&nbsp;</p><p>{</p>\'', '[\'<p>printf(fact(n));</p>\',\'<p>printf(\"%d\",fact(n));</p>\',\'<p>printf(\"%d\",n);</p>\'],[\'<p>int fact(int n)</p>\',\'<p>int fact()</p>\',\'<p>void fact(int n)</p>\'],[\'<p>if(n&gt;=1)</p>\',\'<p>if(n&gt;1)</p>\',\'<p>if(n&lt;1)</p>\'],[\'<p>return n;</p>\',\'<p>return fact(n-1);</p>\',\'<p>return n*fact(n-1);</p>\'],[\'<p>return 1;}&nbsp;</p><p>}</p>\',\'<p>return 0;}&nbsp;</p><p>}</p>\',\'<p>return fact(n-1);}&nbsp;</p><p>}</p>\']', '\'<p>printf(\"%d\",fact(n));</p>\',\'<p>int fact(int n)</p>\',\'<p>if(n&gt;=1)</p>\',\'<p>return n;</p>\',\'<p>return 1;}&nbsp;</p><p>}</p>\'', 'Factorial', NULL),
(3, '<p>#include &lt;stdio.h&gt;</p><p>&nbsp;</p><p>int main()</p><p>{<br>&nbsp;</p>', '\'<p>int n, i;</p>\',\'<p>&nbsp;&nbsp;</p>\',\'<p>printf(\"Enter the numbers of elements: \");</p><p>&nbsp;scanf(\"%d\", &amp;n);</p><p>&nbsp;</p><p>while (n &gt; 100 || n &lt;= 0)</p><p>&nbsp;</p><p>{</p><p>&nbsp;printf(\"Error! number should in range of (1 to 100).\\n\");</p><p>&nbsp;printf(\"Enter the number again: \");</p>\',\'<p>}</p><p>&nbsp;</p><p>for(i = 0; i &lt; n; ++i)</p><p>&nbsp;{</p><p>&nbsp;printf(\"%d. Enter number: \", i+1);</p><p>&nbsp;scanf(\"%f\", &amp;num[i]);</p>\',\'<p>}</p>\'', '[\'<p>float num[100];</p>\',\'<p>float num(100);</p>\',\'<p>float num {100}</p>\'],[\'<p>float sum = 1.0, average;</p>\',\'<p>float sum = 0, average;</p>\',\'<p>float sum = 0.0, average;</p>\'],[\'<p>scanf(\"%d\", &amp;n);</p>\',\'<p>scanf(\"%f\" ,&amp;n);</p>\',\'<p>Scanf(\"%d\", &amp;n)</p>\'],[\'<p>sum += num(i);</p>\',\'<p>sum += num[i];</p>\',\'<p>sum *= num[i];</p>\'],[\'<p>average = sum + n;printf(\"Average = %.2f\", average);</p><p>return 0;</p><p>}</p>\',\'<p>average = sum / n;printf(\"Average = %.2f\", average);</p><p>return 0;</p><p>}</p>\',\'<p>average = sum % n;printf(\"Average = %.2f\", average);</p><p>&nbsp;return 0;</p><p>}</p>\']', '\'<p>float num[100];</p>\',\'<p>float sum = 0.0, average;</p>\',\'<p>scanf(\"%d\", &amp;n);</p>\',\'<p>sum += num[i];</p>\',\'<p>average = sum / n;printf(\"Average = %.2f\", average);</p><p>return 0;</p><p>}</p>\'', 'Finding Average Using Arrays', NULL),
(4, '<p>#include&lt;stdio.h&gt;</p><p>long long convert_deci(int);</p><p>int main()</p><p>{</p>', '\'<p>int n;</p><p>&nbsp;printf(\"enter a decimal number: \");</p><p>&nbsp;scanf(\"%d\" , &amp;n);</p><p>&nbsp;printf(\"%d in decimal = %d in binary\" , n, convert_deci(n));</p><p>&nbsp;return 0;</p><p>}</p>\',\'<p>{</p><p>&nbsp;long long binaryno = 0;</p><p>&nbsp;int rem , i = 1, step =1;</p>\',\'<p>{</p><p>&nbsp;rem = n%2;</p>\',\'<p>&nbsp;</p>\',\'<p>binaryno += rem*i;</p><p>&nbsp;i *= 10;}</p>\'', '[\'<p>long long convert_deci( int n );</p>\',\'<p>long long convert_deci( int n )</p>\',\'<p>long long convert_deci( float n)</p>\'],[\'<p>while ( n =0 )</p>\',\'<p>while ( n!=0 );</p>\',\'<p>while ( n!=0 )</p>\'],[\'<p>print(\"Step %d: %d/2, Remainder = %d, Quotient = %d\\n\", step++, n, rem, n/2);</p>\',\'<p>printf(\"Step %d: %d/2, Remainder = %d, Quotient = %d\\n\", n, step++, rem, n/2);</p>\',\'<p>printf(\"Step %d: %d/2, Remainder = %d, Quotient = %d\\n\", step++, n, rem, n/2)</p>\'],[\'<p>n /= 2;</p>\',\'<p>n /=10;</p>\',\'<p>n %= 2;;</p>\'],[\'<p>return n;}</p>\',\'<p>return binaryno;}</p>\',\'<p>return rem;}</p>\']', '\'<p>long long convert_deci( int n )</p>\',\'<p>while ( n!=0 )</p>\',\'<p>printf(\"Step %d: %d/2, Remainder = %d, Quotient = %d\\n\", n, step++, rem, n/2);</p>\',\'<p>n /= 2;</p>\',\'<p>return binaryno;}</p>\'', 'Decimal to Binary conversion', NULL),
(5, '<p>//(duck number is one which has 0 as any of its digits)</p><p>#include&lt;stdio.h&gt;</p><p>int main()</p><p>{</p><p>int num,digit,count=0;</p>', '\'<p>printf(\"enter number\");</p>\',\'<p>&nbsp;</p>\',\'<p>{</p>\',\'<p>}</p>\'', '[\'<p>scanf(\"%d\",&amp;num);</p>\',\'<p>scanf(\"%c\",&amp;num);</p>\',\'<p>scanf(\"%d\",&amp;number);</p>\'],[\'<p>while(num&gt;=0)</p>\',\'<p>while(num&gt;0)</p>\',\'<p>while(0&gt;num)</p>\'],[\'<p>num=num/10;</p><p>&nbsp;if(num=0)</p><p>&nbsp;count++;</p><p>&nbsp;digit=num%10;</p>\',\'<p>digit=num%10;</p><p>&nbsp;if(num==0)</p><p>&nbsp;count++;</p><p>&nbsp;num=num/10;</p>\',\'<p>num=num/10;</p><p>&nbsp;if(num=0)</p><p>&nbsp;count++;</p><p>&nbsp;digit=num%10;</p>\'],[\'<p>if(count&gt;=0)</p><p>&nbsp;printf(\"it\'s not a duck number);</p><p>&nbsp;else</p><p>&nbsp;printf(\"It\'s a duck number\");return 0;</p><p>}<br>&nbsp;</p>\',\'<p>if(count&gt;=0)</p><p>&nbsp;printf(\"it\'s a duck number);</p><p>&nbsp;else</p><p>&nbsp;printf(\"Its not a duck number\");return 0;</p><p>}</p>\',\'<p>if(count&gt;0)</p><p>&nbsp;printf(\"it\'s a duck number);</p><p>&nbsp;else</p><p>&nbsp;printf(\"Its not a duck number\");return 0;</p><p>}<br>&nbsp;</p>\']', '\'<p>scanf(\"%d\",&amp;num);</p>\',\'<p>while(num&gt;0)</p>\',\'<p>digit=num%10;</p><p>&nbsp;if(num==0)</p><p>&nbsp;count++;</p><p>&nbsp;num=num/10;</p>\',\'<p>if(count&gt;0)</p><p>&nbsp;printf(\"it\'s a duck number);</p><p>&nbsp;else</p><p>&nbsp;printf(\"Its not a duck number\");return 0;</p><p>}<br>&nbsp;</p>\'', 'To Check Wether a Number is a Duck Number or not.', NULL),
(6, '<p>//Equilibrium index of an array is an index such that the sum of elements at lower indexes is equal to the sum of elements at //higher indexes.</p><p>#include &lt;stdio.h&gt;&nbsp;</p><p>int equilibrium(int arr[], int n) ;&nbsp;</p><p>int main()&nbsp;</p><p>{</p><p>&nbsp;</p>', '\'<p>int arr[] = { -7, 1, 5, 2, -4, 3, 0 };&nbsp;</p><p>int arr_size = sizeof(arr) / sizeof(arr[0]);</p>\',\'<p>&nbsp;</p>\',\'<p>&nbsp;</p>\',\'<p>&nbsp;</p>\',\'<p>&nbsp;</p>\',\'<p>//If no equilibrium index found then what should be returned&nbsp;</p>\'', '[\'<p>printf(\"First equilibrium index is %d\", equilibrium(arr, arr_size)); return 0; }</p>\',\'<p>printf(\"First equilibrium index is %d\", equilibrium(arr[], arr_size));return 0;}</p>\',\'<p>int result=equilibrium(arr[],arr_size); printf(\"First equilibrium index is %d\",result);return 0;}</p>\'],[\'<p>int equilibrium(int arr[], int n)</p><p>{ int sum = 0, leftsum = 0;</p>\',\'<p>int equilibrium(int arr[], int n)&nbsp;</p><p>{ int sum =leftsum=0 ;</p>\',\'<p>int equilibrium(int arr, int n)&nbsp;</p><p>&nbsp;{ int sum,leftsum ;</p>\'],[\'<p>for (int i = 0; i &lt; n; ++i)&nbsp;</p><p>sum += arr[i];</p>\',\'<p>for (int i = 0; i &lt; n; ++i)&nbsp;</p><p>&nbsp;sum = arr[i];</p>\',\'<p>for (int i = 0; i &lt; n-1; ++i)&nbsp;</p><p>sum = arr[i];&nbsp;<br>&nbsp;</p>\'],[\'<p>for (int i = 0; i &lt; n; ++i) {&nbsp;</p><p>sum -= arr[i];</p>\',\'<p>for (int i = 0; i &lt; n-1; ++i)&nbsp;</p><p>sum = sum-arr[i-i];</p>\',\'<p>for (int i = 0; i &lt; n; ++i)&nbsp;</p><p>sum = sum+arr[i];</p>\'],[\'<p>if (leftsum == sum)&nbsp;</p><p>return i; leftsum += arr[i]; }</p>\',\'<p>if (leftsum == sum)&nbsp;</p><p>return 1; leftsum -= arr[i]; }&nbsp;</p>\',\'<p>if (leftsum == sum)&nbsp;</p><p>return i; leftsum = arr[i]; }</p>\'],[\'<p>return -1; }</p>\',\'<p>return 1;</p>\',\'<p>return 0;</p>\']', '\'<p>printf(\"First equilibrium index is %d\", equilibrium(arr, arr_size)); return 0; }</p>\',\'<p>int equilibrium(int arr[], int n)</p><p>{ int sum = 0, leftsum = 0;</p>\',\'<p>for (int i = 0; i &lt; n; ++i)&nbsp;</p><p>sum += arr[i];</p>\',\'<p>for (int i = 0; i &lt; n; ++i) {&nbsp;</p><p>sum -= arr[i];</p>\',\'<p>if (leftsum == sum)&nbsp;</p><p>return i; leftsum += arr[i]; }</p>\',\'<p>return -1; }</p>\'', 'Find Equilibrium Index of Array', NULL),
(7, '<p>#include &lt;stdio.h&gt;</p><p>int main()</p><p>{</p><p>&nbsp;int a, b, l, h, i;</p>', '\'<p>printf(\"Enter values of a and b\");</p><p>&nbsp;scanf(\"%d%d\", &amp;a, &amp;b);</p>\',\'<p>{&nbsp;<br>&nbsp;</p>\',\'<p>&nbsp;</p>\',\'<p>}</p>\'', '[\'<p>for(i = 1; i &lt;= a &amp;&amp; i != b; i++)</p>\',\'<p>for(i = 1; i &lt;= a || i &lt;= b; i++)</p>\',\'<p>for(i = 1; i &lt;= b; i++, a++)</p>\'],[\'<p>if(i%a == 0)</p>\',\'<p>if(b%i == 0)</p>\',\'<p>if(a%i == 0 &amp;&amp; b%i == 0)</p>\'],[\'<p>i = h;</p>\',\'<p>break;</p>\',\'<p>h = i;</p>\'],[\'<p>l = h/(a*b);</p><p>printf(\"LCM = %d\\nHCF = %d\", l, h);</p><p>&nbsp;return 0;</p><p>}</p>\',\'<p>l = (a*b)/h;</p><p>printf(\"LCM = %d\\nHCF = %d\", l, h);</p><p>&nbsp;return 0;</p><p>}</p>\',\'<p>l = a/(h*b);</p><p>printf(\"LCM = %d\\nHCF = %d\", l, h);</p><p>&nbsp;return 0;</p><p>}</p>\']', '\'<p>for(i = 1; i &lt;= a || i &lt;= b; i++)</p>\',\'<p>if(a%i == 0 &amp;&amp; b%i == 0)</p>\',\'<p>h = i;</p>\',\'<p>l = h/(a*b);</p><p>printf(\"LCM = %d\\nHCF = %d\", l, h);</p><p>&nbsp;return 0;</p><p>}</p>\'', 'find HCF & LCM of two numbers', NULL),
(8, '<p>#include &lt;stdio.h&gt;<br>&nbsp;</p>', '\'<p>//(function definition)</p>\',\'<p>{</p><p>&nbsp;int t = *a;<br>&nbsp;</p>\',\'<p>*b = t;</p><p>}<br>int main()</p><p>{</p><p>&nbsp;int a,b;</p><p>&nbsp;printf(\"Enter two numbers\\n\");</p><p>&nbsp;scanf(\"%d%d\",&amp;a,&amp;b);</p>\',\'<p>&nbsp;</p>\'', '[\'<p>void swap(int* a, int* b)</p>\',\'<p>void swap(int a, int b)</p>\',\'<p>void swap(int &amp;a, int &amp;b)</p>\'],[\'<p>*b = *a;</p>\',\'<p>*a = *b;</p>\',\'<p>*a = t;</p>\'],[\'<p>swap(a,b);</p>\',\'<p>swap(*a,*b);</p>\',\'<p>swap(&amp;a,&amp;b);</p>\'],[\'<p>printf(\"%d %d\",a,b);</p><p>printf(\"\\tare the swapped values\");</p><p>}</p>\',\'<p>printf(\"%d %d\",*a,*b);</p><p>printf(\"\\tare the swapped values\");</p><p>}</p>\',\'<p>printf(\"%d %d\",&amp;a,&amp;b);</p><p>printf(\"\\tare the swapped values\");</p><p>}</p>\']', '\'<p>void swap(int* a, int* b)</p>\',\'<p>*a = *b;</p>\',\'<p>swap(&amp;a,&amp;b);</p>\',\'<p>printf(\"%d %d\",a,b);</p><p>printf(\"\\tare the swapped values\");</p><p>}</p>\'', 'Swap two variables using function', NULL),
(10, '<p>/*</p><p>&nbsp;1</p><p>&nbsp;2 3</p><p>&nbsp;4 5 6</p><p>7 8 9 10</p><p>*/</p><p>&nbsp;</p><p>#include &lt;stdio.h&gt;</p><p>int main()</p><p>{</p>', '\'<p>int c = 1, i, s, p;</p>\',\'<p>{</p>\',\'<p>printf(\" \");</p>\',\'<p>&nbsp;</p>\'', '[\'<p>for(i = 1; i &lt; 5; i--)</p>\',\'<p>for(; i&lt;= 4; j++)</p>\',\'<p>for(i = 1; i &lt;= 4; i++)</p>\'],[\'<p>for(s = 4-i; s &gt;= 1; s--)</p>\',\'<p>for(s = 1; s &lt;= 4-1; s--)</p>\',\'<p>for(s = 1; s &lt;= 4-1; s--)</p>\'],[\'<p>for(p = 1; p &lt;= i; p++, c++)</p>\',\'<p>for(p = i; p &lt;= 4; p++)</p>\',\'<p>for(p = 1; p &lt;= i; p++)</p>\'],[\'<p>printf(\"%d\", c);</p><p>printf(\"\\n\");</p><p>&nbsp;}</p><p>}</p>\',\'<p>printf(\"%d \", p);</p><p>printf(\"\\n\");</p><p>&nbsp;}</p><p>}</p>\',\'<p>printf(\"%d \", c);</p><p>printf(\"\\n\");</p><p>&nbsp;}</p><p>}</p>\']', '\'<p>for(i = 1; i &lt;= 4; i++)</p>\',\'<p>for(s = 4-i; s &gt;= 1; s--)</p>\',\'<p>for(p = 1; p &lt;= i; p++, c++)</p>\',\'<p>printf(\"%d \", c);</p><p>printf(\"\\n\");</p><p>&nbsp;}</p><p>}</p>\'', 'Pattern', NULL),
(11, '<p>/*&nbsp;</p><p>1</p><p>&nbsp;01</p><p>&nbsp;101</p><p>&nbsp;0101</p><p>&nbsp;.</p><p>&nbsp;.</p><p>&nbsp;.</p><p>&nbsp;n times</p><p>&nbsp;</p><p>*/</p><p>&nbsp;</p><p>#include &lt;stdio.h&gt;</p><p>&nbsp;</p><p>int main()</p><p>{</p>', '\'<p>int i,j,n,p=1;</p><p>&nbsp;printf(\"Enter the number of rows: \");</p><p>&nbsp;scanf(\"%d\",&amp;n);</p>\',\'<p>{</p><p>for(j=1;j&lt;=i;j++){</p>\',\'<p>{</p><p>&nbsp;printf(\"%d\",p);</p><p>&nbsp;}</p><p>&nbsp;else{</p>\'', '[\'<p>for(i=1;i&lt;=n;i++)</p>\',\'<p>for(i=0;i&lt;n;i++)</p>\',\'<p>for(i=1;i&lt;=n+1;i++)</p>\'],[\'<p>if(i%j==0)</p>\',\'<p>if((i-j)%2==0)</p>\',\'<p>if(i+j%2!=0)</p>\'],[\'<p>printf(\"%d\",--p);</p><p>}</p><p>&nbsp;printf(\"\\n\");</p><p>&nbsp;}</p><p>return 0;</p><p>}<br>&nbsp;</p>\',\'<p>printf(\"%d\",-p+1);</p><p>}</p><p>&nbsp;printf(\"\\n\");</p><p>&nbsp;}</p><p>return 0;</p><p>}</p>\',\'<p>printf(\"%d\",(p*-1)+1)</p><p>}</p><p>&nbsp;printf(\"\\n\");</p><p>&nbsp;}</p><p>return 0;</p><p>}<br>&nbsp;</p>\']', '\'<p>for(i=1;i&lt;=n;i++)</p>\',\'<p>if((i-j)%2==0)</p>\',\'<p>printf(\"%d\",-p+1);</p><p>}</p><p>&nbsp;printf(\"\\n\");</p><p>&nbsp;}</p><p>return 0;</p><p>}</p>\'', 'Pattern 2', NULL),
(12, '<p>#include &lt;stdio.h&gt;&nbsp;<br>&nbsp;<br>void FloydTriangle(int n) ;<br>&nbsp;<br>int main()&nbsp;<br>{int n;<br>printf(\"enter the row till which you want floyd\'s triangle\");<br>scanf(\"%d\",&amp;n);<br>&nbsp; &nbsp;FloydTriangle(n);&nbsp;<br>&nbsp; &nbsp;return 0;&nbsp;<br>}&nbsp;</p>', '\'<p>void FloydTriangle(int n)&nbsp;<br>{&nbsp;<br>&nbsp; int i, j, val = 1;&nbsp;</p>\',\'<p>{</p>\',\'<p>&nbsp;</p>\'', '[\'<p>for (i=1; i&lt;=n; i++)</p>\',\'<p>for (i=1; i&lt;n; i++)</p>\',\'<p>for (i=0; i&lt;=n; i++)</p>\'],[\'<p>for (j=1; j&lt;=i; j++)</p>\',\'<p>for (j=1; j&lt;=i; j--)</p>\',\'<p>for (j=1; j&lt;i; j++)</p>\'],[\'<p>printf(\"%d \", val++);</p><p>printf(\"\\n\");&nbsp;<br>&nbsp; }&nbsp;<br>}&nbsp;<br>&nbsp;</p>\',\'<p>printf(\"%d \", val);</p><p>printf(\"\\n\");&nbsp;<br>&nbsp; }&nbsp;<br>}&nbsp;<br>&nbsp;</p>\',\'<p>printf(\"%d \", val--);</p><p>printf(\"\\n\");&nbsp;<br>&nbsp; }&nbsp;<br>}&nbsp;<br>&nbsp;</p>\']', '\'<p>for (i=1; i&lt;=n; i++)</p>\',\'<p>for (j=1; j&lt;=i; j++)</p>\',\'<p>printf(\"%d \", val++);</p><p>printf(\"\\n\");&nbsp;<br>&nbsp; }&nbsp;<br>}&nbsp;<br>&nbsp;</p>\'', 'Print floyds triangle upto n rows entered by the user', NULL),
(13, '<p>#include&lt;stdio.h&gt;</p><p>&nbsp;</p><p>void reverse(int*arr,int size);</p><p>&nbsp;</p><p>int main(){</p>', '\'<p>&nbsp;</p>\',\'<p>scanf(\"%d\",&amp;size);</p>\',\'<p>{</p>\',\'<p>}</p><p>&nbsp;reverse(arr,size);</p><p>&nbsp;return 0;</p><p>}<br>&nbsp;</p>\',\'<p>{</p><p>int temp[100];</p>\',\'<p>{</p>\',\'<p>}</p>\'', '[\'<p>int arr[100];int size;</p>\',\'<p>int arr ; char size;</p>\',\'<p>float arr[5], size;</p>\'],[\'<p>for(int i = 0 ; i&lt;=size ; i++)</p>\',\'<p>for(int i = 1 ; i &lt; size ; i+=1)</p>\',\'<p>for(int i = 1 ; i &lt; size ; i+=2)</p>\'],[\'<p>scanf(\"%d\",&amp;arr[i]);</p>\',\'<p>scanf(\"%d\",&amp;arr[i+1]);</p>\',\'<p>scanf(\"%d\",&amp;arr[i-1]);</p>\'],[\'<p>void reverse(int arr[5], float size)</p>\',\'<p>void reverse(int arr[100],int size)</p>\',\'<p>int reverse(int arr, int size)</p>\'],[\'<p>for(int i = 0 ; i &lt; size ; i++)</p>\',\'<p>for(int i = 1 ; i&lt;size ; i++)</p>\',\'<p>for(int i = 0 ; i &lt;= size; i++)</p>\'],[\'<p>temp[i+1] = arr[size-i];</p>\',\'<p>temp[i] = arr[size-i];</p>\',\'<p>temp[i] = arr[size-i-1];</p>\'],[\'<p>for(int i = 0 ; i &lt; size ; i++)</p><p>{</p><p>&nbsp;printf(\"%d \",temp[i]);</p><p>&nbsp;}</p><p>}</p>\',\'<p>for(int i = 1; i&lt; size ; i++)</p><p>{</p><p>&nbsp;printf(\"%d \",temp[i]);</p><p>&nbsp;}</p><p>}</p>\',\'<p>for( int i = 0; i &lt;=size;i++)</p><p>{</p><p>&nbsp;printf(\"%d \",temp[i]);</p><p>&nbsp;}</p><p>}</p>\']', '\'<p>int arr[100];int size;</p>\',\'<p>for(int i = 1 ; i &lt; size ; i+=1)</p>\',\'<p>scanf(\"%d\",&amp;arr[i]);</p>\',\'<p>void reverse(int arr[100],int size)</p>\',\'<p>for(int i = 0 ; i &lt; size ; i++)</p>\',\'<p>temp[i] = arr[size-i-1];</p>\',\'<p>for(int i = 0 ; i &lt; size ; i++)</p><p>{</p><p>&nbsp;printf(\"%d \",temp[i]);</p><p>&nbsp;}</p><p>}</p>\'', 'Reversing of a number using Array', NULL),
(14, '<p>/*</p><p>&nbsp;</p><p>4</p><p>9</p><p>25</p><p>49</p><p>121</p><p>169</p><p>.</p><p>n terms</p><p>*/</p><p># include &lt;stdio.h&gt;</p><p>int main()</p><p>{</p>', '\'<p>int n, f, i, j, c = 1;</p><p>&nbsp;printf(\"Enter number of terms\");</p><p>&nbsp;scanf(\"%d\", &amp;n);</p>\',\'<p>{</p><p>&nbsp;f = 1;</p>\',\'<p>{</p>\',\'<p>{</p><p>&nbsp;f = 0;</p><p>&nbsp;break;</p><p>&nbsp;}</p><p>&nbsp;}<br>&nbsp;</p>\'', '[\'<p>or(i = 2; c &lt; n; i++)</p>\',\'<p>for(i = 2; c &lt;= n; i++)</p>\',\'<p>for(i = 2; c == n; i++)</p>\'],[\'<p>for(j = 2; j &lt; i; j++)</p>\',\'<p>for(j = 2; j &lt; n; j++)</p>\',\'<p>for(j = 2; j &lt; c; c++)</p>\'],[\'<p>if(i%j == 0)</p>\',\'<p>if(j%i != 0)</p>\',\'<p>if(j%i == 0)</p>\'],[\'<p>if(f == 0)</p><p>{</p><p>&nbsp;printf(\"%d\\n\", i*i);</p><p>&nbsp;c++;</p><p>&nbsp;}</p><p>&nbsp;}</p><p>&nbsp;return 0;</p><p>}</p>\',\'<p>if(f == 1)</p><p>{</p><p>&nbsp;printf(\"%d\\n\", i*i);</p><p>&nbsp;c++;</p><p>&nbsp;}</p><p>&nbsp;}</p><p>&nbsp;return 0;</p><p>}</p>\',\'<p>if(c == 0)</p><p>{</p><p>&nbsp;printf(\"%d\\n\", i*i);</p><p>&nbsp;c++;</p><p>&nbsp;}</p><p>&nbsp;}</p><p>&nbsp;return 0;</p><p>}</p>\']', '\'<p>for(i = 2; c &lt;= n; i++)</p>\',\'<p>for(j = 2; j &lt; i; j++)</p>\',\'<p>if(i%j == 0)</p>\',\'<p>if(f == 1)</p><p>{</p><p>&nbsp;printf(\"%d\\n\", i*i);</p><p>&nbsp;c++;</p><p>&nbsp;}</p><p>&nbsp;}</p><p>&nbsp;return 0;</p><p>}</p>\'', 'PROGRAM TO PRINT SERIES', NULL),
(15, '<p>#include&lt;stdio.h&gt;</p><p>&nbsp;</p><p>int main()<br>{</p>', '\'<p>int n,reverseint = 0, remainder;<br>printf(\"Enter number to check: \");<br><br>scanf(\"%d\",&amp;n);<br><br>int temp=n;</p>\',\'<p>{</p><p>&nbsp;</p>\',\'<p>reverseint = reverseint*10 + remainder;</p>\',\'<p>&nbsp;</p><p>}</p>\',\'<p>&nbsp;</p><p>printf(\"%d is a palindrome \" , temp);<br>&nbsp; &nbsp; &nbsp; else<br>&nbsp;</p>\'', '[\'<p>while( n!=0 )</p>\',\'<p>while( n&lt;0 )</p>\',\'<p>while( n==0 )</p>\'],[\'<p>remainder = n%2;</p>\',\'<p>remainder = n%10;</p>\',\'<p>remainder = n/2;</p>\'],[\'<p>n=n-1;</p>\',\'<p>n = n/2;</p>\',\'<p>n /=10;</p>\'],[\'<p>if(temp = reverseint )</p>\',\'<p>if(temp == reverseint)</p>\',\'<p>if(temp == reverseint);</p>\'],[\'<p>printf(\"%d is not a palindrome\", temp);<br>return 0;<br>}</p>\',\'<p>print(\"%d is not a palindrome\",temp)<br>return 0;<br>}</p>\',\'<p>printf(\"%d is not a palindrome\" , reverseint);<br>return 0;<br>}</p>\']', '\'<p>while( n!=0 )</p>\',\'<p>remainder = n%10;</p>\',\'<p>n /=10;</p>\',\'<p>if(temp == reverseint)</p>\',\'<p>printf(\"%d is not a palindrome\", temp);<br>return 0;<br>}</p>\'', 'Check a Number for Palindrome', NULL),
(16, '<p>// An automorphic number is a number whose square contains the same number as last digits or digit.</p><p>// Example :, 52 = 25,62 = 36, 762= 5776, and 8906252 = 793212890625</p><p>#include&lt;stdio.h&gt;</p><p>int main()</p><p>{</p>', '\'<p>long int n,num,sqr,rem=0;</p><p>int temp,ans;</p><p>printf(\"Enter a number: \");<br>&nbsp;</p>\',\'<p>num=n;</p>\',\'<p><br>temp=10;</p><p>printf(\"square of %ld is %ld \",n,sqr);</p>\',\'<p>{</p><p>rem=sqr%temp;</p><p>if(num==rem)</p><p>{</p><p>ans=1;</p><p>break;</p><p>}</p><p>n=n/10;</p><p>temp=temp*10;</p><p>}<br>&nbsp;</p>\'', '[\'<p>scanf(\"%d\",&amp;n);</p>\',\'<p>scanf(\"%ld\",&amp;n);</p>\',\'<p>scanf(\"%u\",&amp;n);</p>\'],[\'<p>sqr=n*n;</p>\',\'<p>sqr=pow(n,2);</p>\',\'<p>sqr=square(n);</p>\'],[\'<p>while(n&gt;0)</p>\',\'<p>while(temp&gt;0)</p>\',\'<p>while(num&gt;0)</p>\'],[\'<p>if(ans=1)</p><p>{</p><p>printf(\"\\n %ld is not automorphic\",num);</p><p>}</p><p>else</p><p>{</p><p>printf(\"\\n %ld is automorphic\",num);</p><p>}</p><p>return 0;</p><p>}</p>\',\'<p>if(ans==1)</p><p>{</p><p>printf(\"\\n %ld is automorphic\",num);</p><p>}</p><p>else</p><p>{</p><p>printf(\"\\n %ld is not automorphic\",num);</p><p>}</p><p>return 0;</p><p>}</p>\',\'<p>if(ans==1)</p><p>{</p><p>printf(\"\\n %ld is not automorphic\",num);</p><p>}</p><p>else</p><p>{</p><p>printf(\"\\n %ld is automorphic\",num);</p><p>}</p><p>return 0;</p><p>}<br>&nbsp;</p>\']', '\'<p>scanf(\"%ld\",&amp;n);</p>\',\'<p>sqr=n*n;</p>\',\'<p>while(n&gt;0)</p>\',\'<p>if(ans==1)</p><p>{</p><p>printf(\"\\n %ld is automorphic\",num);</p><p>}</p><p>else</p><p>{</p><p>printf(\"\\n %ld is not automorphic\",num);</p><p>}</p><p>return 0;</p><p>}</p>\'', 'Check For Automorphic', NULL),
(17, '<p>// INPUT1: abcd</p><p>// OUTPUT1: badc</p><p>// -----------------</p><p>// INPUT2: abc</p><p>// OUTPUT2: printf(\"Length of string is odd\")<br><br>&nbsp;</p><p>#include &lt;stdio.h&gt;</p><p>#include &lt;string.h&gt;</p><p>// main function</p><p>int main()</p><p>{</p>', '\'<p>// Declare an integer pointer</p><p>&nbsp;&nbsp;&nbsp;&nbsp;char string[30]={0};</p><p>&nbsp;&nbsp;&nbsp;&nbsp;char c=0;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;int length=0,i=0;</p><p>&nbsp;&nbsp;&nbsp;// Take string input from the user</p><p>&nbsp;&nbsp;&nbsp;&nbsp;printf(\"\\nEnter the string : \");</p><p>&nbsp;&nbsp;&nbsp;&nbsp;</p>\',\'<p>&nbsp;</p><p>&nbsp;</p>\',\'<p>if(length%2==0)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;{</p>\',\'<p>{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c = string[i] ;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string[i] = string[i+1];</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\'', '[\'<p>scanf(\"%[^\\n]%*c\", string);</p>\',\'<p>scanf(\"%*c\", string);</p>\',\'<p>scanf(\"%d\", string);</p>\'],[\'<p>length = slen(string);</p>\',\'<p>length = strlen(string);</p>\',\'<p>length = strlen(str);</p>\'],[\'<p>for(i=0;i&lt;length;i+=2)</p>\',\'<p>for(i=0,i&lt;length,i+=2)</p>\',\'<p>for(i=0;i&lt;length;i++)</p>\'],[\'<p>string[i+1] = string[i];</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"\\nAfter Swap String : %s\",string);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;else</p><p>&nbsp;&nbsp;&nbsp;&nbsp;{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"\\nThe length of the string is Odd..\\n\");</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;return 0;</p><p>}</p>\',\'<p>string[i+1] = string[i-1]; &nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"\\nAfter Swap String : %s\",string);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;else</p><p>&nbsp;&nbsp;&nbsp;&nbsp;{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"\\nThe length of the string is Odd..\\n\");</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;return 0;</p><p>}</p>\',\'<p>string[i+1] = c;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"\\nAfter Swap String : %s\",string);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;else</p><p>&nbsp;&nbsp;&nbsp;&nbsp;{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"\\nThe length of the string is Odd..\\n\");</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;return 0;</p><p>}</p>\']', '\'<p>scanf(\"%[^\\n]%*c\", string);</p>\',\'<p>length = strlen(string);</p>\',\'<p>for(i=0;i&lt;length;i+=2)</p>\',\'<p>string[i+1] = c;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"\\nAfter Swap String : %s\",string);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;else</p><p>&nbsp;&nbsp;&nbsp;&nbsp;{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"\\nThe length of the string is Odd..\\n\");</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;return 0;</p><p>}</p>\'', 'Swap adjacent characters of string', NULL),
(18, '<p>#include &lt;stdio.h&gt;</p><p>int main()</p><p>{</p>', '\'<p>int m, n, c, d, matrix[10][10], transpose[10][10];</p><p>printf(\"Enter the number of rows and columns of matrix\\n\");</p><p>scanf(\"%d%d\", &amp;m, &amp;n);</p><p>printf(\"Enter elements of the matrix\\n\");</p><p>&nbsp;</p>\',\'<p>&nbsp;</p><p>&nbsp;</p>\',\'<p>for (c = 0; c &lt; m; c++)</p><p>&nbsp; &nbsp; &nbsp; &nbsp;for( d = 0 ; d &lt; n ; d++ )</p><p>&nbsp;&nbsp;</p>\',\'<p>printf(\"Transpose of the matrix:\\n\");</p><p>&nbsp;</p>\',\'<p>{</p><p>for (d = 0; d &lt; m; d++)</p><p>printf(\"%d\\t\", transpose[c][d]);</p><p>&nbsp;</p>\'', '[\'<p>for (c = 0; c &lt; m; c++)</p><p>for(d = 0; d &lt; n; d++)</p>\',\'<p>for (c = 0; c &lt; n; c++)</p><p>for(d = 0; d &lt; m; d++)</p>\',\'<p>for (c = 0; c &lt; m; d++)</p><p>for(d = 0; d &lt; n; c++)</p>\'],[\'<p>scanf(\"%d\", &amp;matrix[c][d]);</p>\',\'<p>scanf(\"%c\", &amp;matrix[c][d]);</p>\',\'<p>scanf(\"%d\", &amp;matrix[c]);</p>\'],[\'<p>transpose[d][c] = matrix[c][d];</p>\',\'<p>transpose[d][c] = matrix[c][d];</p>\',\'<p>matrix[c][d] = transpose[d][c];</p>\'],[\'<p>for (c = 0; c &lt; n; c++)</p>\',\'<p>for (c = 0; c &gt; n; c++)</p>\',\'<p>for (c = 0; c &lt; n; c--)</p>\'],[\'<p>printf(\"\\t\");</p><p>&nbsp; &nbsp;}</p><p>&nbsp; &nbsp;return 0;</p><p>}</p>\',\'<p>printf(\"\\p\");</p><p>&nbsp; &nbsp;}</p><p>&nbsp; &nbsp;return 0;</p><p>}</p>\',\'<p>printf(\"\\n\");</p><p>&nbsp; &nbsp;}</p><p>&nbsp; &nbsp;return 0;</p><p>}</p>\']', '\'<p>for (c = 0; c &lt; m; c++)</p><p>for(d = 0; d &lt; n; d++)</p>\',\'<p>scanf(\"%d\", &amp;matrix[c][d]);</p>\',\'<p>transpose[d][c] = matrix[c][d];</p>\',\'<p>for (c = 0; c &lt; n; c++)</p>\',\'<p>printf(\"\\n\");</p><p>&nbsp; &nbsp;}</p><p>&nbsp; &nbsp;return 0;</p><p>}</p>\'', 'Transpose of a matrix', NULL),
(19, '<p>#include &lt;stdio.h&gt;</p><p>int main()</p><p>{</p><p>int m, n, c, d, first[10][10], second[10][10], sum[10][10];</p><p>&nbsp;</p>', '\'<p>printf(\"Enter the number of rows and columns of matrix\\n\");</p><p>scanf(\"%d%d\", &amp;m, &amp;n);</p><p>printf(\"Enter the elements of first matrix\\n\");</p><p>for (c = 0; c &lt; m; c++)</p><p>&nbsp;</p>\',\'<p>scanf(\"%d\", &amp;first[c][d]);</p><p>printf(\"Enter the elements of second matrix\\n\");</p><p>for (c = 0; c &lt; m; c++)</p><p>for (d = 0; d &lt; n; d++)</p><p>&nbsp;</p>\',\'<p>&nbsp;</p><p>&nbsp;</p>\',\'<p>for (c = 0; c &lt; m; c++) {</p><p>for (d = 0 ; d &lt; n; d++) {</p>\'', '[\'<p>for (d = 0 ; d &lt; n; d++)</p>\',\'<p>for (c = 0 ; c &lt; n; c++)</p>\',\'<p>for (m = 0 ; m &lt; n; m++)</p>\'],[\'<p>scanf(\"%d\", &amp;second[c][d]);</p>\',\'<p>scanf(\"%d\", &amp;first[c][d]);</p>\',\'<p>scanf( %d , &amp;second[c][d]);</p>\'],[\'<p>print(\"Sum of entered matrices:-\\n\");</p>\',\'<p>printf(\"Sum of entered matrices:-\\n\");</p>\',\'<p>cout&lt;&lt;\"Sum of entered matrices:-\\n\";</p>\'],[\'<p>sum[c][d] = first[c][d] + second[c][d];</p><p>printf(\"%d\\t\", sum[c][d]);</p><p>}</p><p>printf(\"\\n\");</p><p>}</p><p>return 0;</p><p>}</p>\',\'<p>sum[c][d] == first[c][d] + second[c][d];</p><p>printf(\"%d\\t\", sum[c][d]);</p><p>}</p><p>printf(\"\\n\");</p><p>}</p><p>return 0;</p><p>}</p>\',\'<p>sum[c][d] = first[d][c] + second[c][d];</p><p>printf(\"%d\\t\", sum[c][d]);</p><p>}</p><p>printf(\"\\n\");</p><p>}</p><p>return 0;</p><p>}</p>\']', '\'<p>for (d = 0 ; d &lt; n; d++)</p>\',\'<p>scanf(\"%d\", &amp;second[c][d]);</p>\',\'<p>printf(\"Sum of entered matrices:-\\n\");</p>\',\'<p>sum[c][d] = first[c][d] + second[c][d];</p><p>printf(\"%d\\t\", sum[c][d]);</p><p>}</p><p>printf(\"\\n\");</p><p>}</p><p>return 0;</p><p>}</p>\'', 'Addition of Two matrix', NULL),
(20, '<p>#include&lt;stdio.h&gt;</p><p>#include &lt;ctype.h&gt;<br>&nbsp;</p><p>int main(){</p>', '\'<p>&nbsp;</p>\',\'<p>&nbsp;</p>\',\'<p>if((val&gt;=\'a\' &amp;&amp; val&lt;=\'z\') || (val&gt;=\'A\' &amp;&amp; val&lt;=\'Z\') ){</p><p>&nbsp;printf(\"It is an alphabet\");</p><p>}</p>\'', '[\'<p>int val;</p>\',\'<p>void val;</p>\',\'<p>char val;</p>\'],[\'<p>scanf(\"%d\",&amp;val);</p>\',\'<p>scanf(\"%c\",&amp;val);</p>\',\'<p>scanf(\"%s\",&amp;val);</p>\'],[\'<p>else if( isdigit(val)==0)</p><p>{</p><p>&nbsp;printf(\"It is a special symbol\");</p><p>}</p><p>else {</p><p>&nbsp;printf(\"It is a Number\");</p><p>}</p><p>return 0;</p><p>}</p>\',\'<p>else if(isnum(val)==0)</p><p>{</p><p>&nbsp;printf(\"It is a special symbol\");</p><p>}</p><p>else {</p><p>&nbsp;printf(\"It is a Number\");</p><p>}</p><p>return 0;</p><p>}</p>\',\'<p>else if(isnumber(val)==0)</p><p>{</p><p>&nbsp;printf(\"It is a special symbol\");</p><p>}</p><p>else {</p><p>&nbsp;printf(\"It is a Number\");</p><p>}</p><p>return 0;</p><p>}</p>\']', '\'<p>char val;</p>\',\'<p>scanf(\"%c\",&amp;val);</p>\',\'<p>else if( isdigit(val)==0)</p><p>{</p><p>&nbsp;printf(\"It is a special symbol\");</p><p>}</p><p>else {</p><p>&nbsp;printf(\"It is a Number\");</p><p>}</p><p>return 0;</p><p>}</p>\'', 'Check for digit, alphabet or special symbol', NULL),
(21, '<p>&nbsp;</p><p>#include&lt;stdio.h&gt;</p><p>int main()</p><p>{</p>', '\'<p>&nbsp;</p>\',\'<p>printf(\"enter how many value in array\\n\");</p><p>scanf(\"%d\",&amp;n);</p><p>printf(\"Enter %d value \\n\",n);</p><p>for(i=0;i&lt;n;i++)</p><p>&nbsp;</p>\',\'<p>for(i=0;i&lt;n-1;i++)</p><p>{</p>\',\'<p>{</p>\'', '[\'<p>int a[100],i,j,n,temp;</p>\',\'<p>int a[100],int i,j,n,temp;</p>\',\'<p>int a[100];i,j,n,temp;</p>\'],[\'<p>scanf(\"%d\",&amp;a);</p>\',\'<p>scanf(\"%d\",&amp;a[i]);</p>\',\'<p>scanf(\"%d\",a[&amp;i]);</p>\'],[\'<p>for(j=1;j&lt;n;j++)</p>\',\'<p>for(j=i+1;j&lt;n;j++)</p>\',\'<p>for(j=0;j&lt;=n;j++) &nbsp;&nbsp;&nbsp;</p>\'],[\'<p>if(a[i]&gt;=a[j])</p><p>{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp=a[i];</p><p>&nbsp;&nbsp;&nbsp;a[i]=a[j];</p><p>&nbsp;&nbsp;&nbsp;a[j]=temp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;}</p><p>}</p><p>printf(\"\\n\\nSorted array :\\n\");</p><p>for(i=0;i&lt;n;i++)</p><p>printf(\"%5d\",a[i]);</p><p>return 0;</p><p>}</p>\',\'<p>if(i&gt;=j)</p><p>{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp=a[i];</p><p>&nbsp;&nbsp;&nbsp;a[i]=a[j];</p><p>&nbsp;&nbsp;&nbsp;a[j]=temp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;}</p><p>}</p><p>printf(\"\\n\\nSorted array :\\n\");</p><p>for(i=0;i&lt;n;i++)</p><p>printf(\"%5d\",a[i]);</p><p>return 0;</p><p>}</p>\',\'<p>if(a[i]&lt;a[j])</p><p>{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp=a[i];</p><p>&nbsp;&nbsp;&nbsp;a[i]=a[j];</p><p>&nbsp;&nbsp;&nbsp;a[j]=temp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;}</p><p>}</p><p>printf(\"\\n\\nSorted array :\\n\");</p><p>for(i=0;i&lt;n;i++)</p><p>printf(\"%5d\",a[i]);</p><p>return 0;</p><p>}</p>\']', '\'<p>int a[100],i,j,n,temp;</p>\',\'<p>scanf(\"%d\",&amp;a[i]);</p>\',\'<p>for(j=i+1;j&lt;n;j++)</p>\',\'<p>f(a[i]&gt;=a[j])</p><p>{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp=a[i];</p><p>&nbsp;&nbsp;&nbsp;a[i]=a[j];</p><p>&nbsp;&nbsp;&nbsp;a[j]=temp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;}</p><p>}</p><p>printf(\"\\n\\nSorted array :\\n\");</p><p>for(i=0;i&lt;n;i++)</p><p>printf(\"%5d\",a[i]);</p><p>return 0;</p><p>}</p>\'', 'arrange array in ascending order', NULL),
(22, '<p>#include &lt;stdio.h&gt;</p><p>int calculateLength(char*);</p><p>void main()</p><p>{</p>', '\'<p>char str1[25];</p><p>int l;</p><p>&nbsp;&nbsp;printf(\"\\n\\n Pointer : Calculate the length of the string :\\n\");</p><p>&nbsp;&nbsp;printf(\"---------------------------------------------------\\n\");</p><p>printf(\" Input a string : \");</p><p>scanf(\"%[^\\n]%*c\", str1);</p><p>l = calculateLength(str1);</p>\',\'<p>printf(\"\\n\\n\");</p><p>}</p>\',\'<p>{</p><p>int ctr = 0;</p><p>&nbsp;</p>\',\'<p>{</p><p>ctr++;</p><p>&nbsp;</p>\'', '[\'<p>printf(\" The length of the given string %s is : %d \", str1, l-1);</p>\',\'<p>printf(\" The length of the given string %s is : %d \", str1, l);</p>\',\'<p>printf(\" The length of the given string %s is : %d \", str1, l/2);</p>\'],[\'<p>int calculateLength(char* ch)</p>\',\'<p>float calculateLength(char* ch)</p>\',\'<p>int calcLength(char* ch)</p>\'],[\'<p>while (*ch != NULL)</p>\',\'<p>while ( ch != NULL)</p>\',\'<p>while (*ch == NULL)</p><p>&nbsp;</p>\'],[\'<p>ch++</p><p>}</p><p>return ctr;</p><p>}</p>\',\'<p>ch--;</p><p>}</p><p>return ctr;</p><p>}</p>\',\'<p>ch++;</p><p>}</p><p>return ctr;</p><p>}</p>\']', '\'<p>printf(\" The length of the given string %s is : %d \", str1, l);</p>\',\'<p>int calculateLength(char* ch)</p>\',\'<p>while (*ch != NULL)</p>\',\'<p>ch++;</p><p>}</p><p>return ctr;</p><p>}</p>\'', 'Calculate length of string using pointers', NULL),
(23, '<p>#include&lt;stdio.h&gt;</p><p>void main()</p><p>{</p>', '\'<p>int n, i, arr[50], search, first, last, middle;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Enter total number of elements :\");</p><p>&nbsp;&nbsp;&nbsp;&nbsp;scanf(\"%d\",&amp;n);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Enter %d number :\", n);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;for (i=0; i&lt;n; i++)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scanf(\"%d\",&amp;arr[i]);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Enter a number to find :\");</p><p>&nbsp;&nbsp;&nbsp;&nbsp;scanf(\"%d\", &amp;search);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;first = 0;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;last = n-1;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;</p>\',\'<p>while (first &lt;= last)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(arr[middle] &lt; search)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</p>\',\'<p>}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if(arr[middle] == search)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</p>\',\'<p>break;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; last = middle - 1;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;middle = (first + last)/2;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;if(first &gt; last)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;{</p>\'', '[\'<p>middle = (first+last)/2;</p>\',\'<p>middle = (first-last)/2;</p>\',\'<p>middle = (first+last)*2;</p>\'],[\'<p>first = middle + 1;</p>\',\'<p>first = middle + last;</p>\',\'<p>first = middle - 1;</p>\'],[\'<p>printf(\"%d found at location %d\\n\", search, middle);</p>\',\'<p>printf(\"%d found at location %d\\n\", search, middle+1);</p>\',\'<p>printf(\"%d found at location %d\\n\", search, last - first);</p>\'],[\'<p>printf(\"Not found! %d is not present in the list.\",search);}&nbsp;</p><p>}</p>\',\'<p>printf(\"element found at %d\",last);}&nbsp;</p><p>}</p>\',\'<p>printf(\"element found at %d\",last-1);}</p><p>}</p>\']', '\'<p>middle = (first+last)/2;</p>\',\'<p>first = middle + 1;</p>\',\'<p>printf(\"%d found at location %d\\n\", search, middle+1);</p>\',\'<p>printf(\"Not found! %d is not present in the list.\",search);}</p><p>}</p>\'', 'Binary search in array', NULL),
(24, '<p>#include &lt;stdio.h&gt;</p><p>int main()</p><p>{</p>', '\'<p>int array[100], maximum, size, i, location = 1;</p><p>printf(\"Enter the number of elements in array\\n\");</p>\',\'<p>printf(\"Input elements of array\\n\");</p><p>&nbsp;</p>\',\'<p>&nbsp;</p>\',\'<p>&nbsp;</p>\',\'<p>for (i = 1; i &lt; size; i++)</p><p>{</p><p>if (array[i] &gt; maximum)</p><p>{</p><p>maximum = array[i];</p><p>&nbsp;&nbsp;</p>\'', '[\'<p>scanf(%d, &amp;size);</p>\',\'<p>scanf(\"%d\", &amp;size);</p>\',\'<p>scanf(\"%f\", &amp;size);</p>\'],[\'<p>for (i = 0; i &lt; 100; i++)</p>\',\'<p>for (i = 0; i &lt; location; i++)</p>\',\'<p>for (i = 0; i &lt; size; i++)</p>\'],[\'<p>scanf(\"%d\", array[i]);</p>\',\'<p>scanf(\"%c\", &amp;array[i]);</p>\',\'<p>scanf(\"%d\", &amp;array[i]);</p>\'],[\'<p>maximum = 0;</p>\',\'<p>maximum = array[0];</p>\',\'<p>maximum = array[size];</p>\'],[\'<p>location = i+1;</p><p>}</p><p>}</p><p>printf(\"Maximum element is present at location %d and it\'s value is %d.\\n\", location, maximum);</p><p>return 0;</p><p>}</p>\',\'<p>location = i;</p><p>}</p><p>}</p><p>printf(\"Maximum element is present at location %d and it\'s value is %d.\\n\", location, maximum);</p><p>return 0;</p><p>}</p>\',\'<p>location++;</p><p>}</p><p>}</p><p>printf(\"Maximum element is present at location %d and it\'s value is %d.\\n\", location, maximum);</p><p>return 0;</p><p>}</p>\']', '\'<p>scanf(\"%d\", &amp;size);</p>\',\'<p>for (i = 0; i &lt; size; i++)</p>\',\'<p>scanf(\"%d\", &amp;array[i]);</p>\',\'<p>maximum = array[0];</p>\',\'<p>location = i+1;</p><p>}</p><p>}</p><p>printf(\"Maximum element is present at location %d and it\'s value is %d.\\n\", location, maximum);</p><p>return 0;</p><p>}</p>\'', 'Finding greatest integer in array', NULL),
(25, '<p>/*</p><p>1</p><p>2 3 2</p><p>3 4 5 4 3</p><p>4 5 6 7 6 5 4</p><p>5 6 7 8 9 8 7 6 5</p><p>*/</p>', '\'<p>#include &lt;stdio.h&gt;</p><p>int main()</p><p>{</p><p>int i, space, rows,count = 0, count1 = 0;</p><p>int k=0;</p><p>printf(\"Enter number of rows: \");</p>\',\'<p>&nbsp;</p>\',\'<p>{</p>\',\'<p>{</p><p>printf(\" \");</p><p>++count;</p><p>}</p><p>while(k != 2*i-1)</p><p>{</p>\',\'<p>{</p><p>printf(\"%d \", i+k);</p><p>++count;</p><p>}</p><p>else</p><p>{</p><p>++count1;</p>\'', '[\'<p>scanf(\"%d\",&amp;rows);</p>\',\'<p>scanf(\"%i\",&amp;rows);</p>\',\'<p>scan(\"%d\"&amp;rows);</p>\'],[\'<p>for(i=0; i&lt;=rows; ++i)</p>\',\'<p>for(i=2;i&lt;=rows+1;i++)</p>\',\'<p>for(i=1; i&lt;=rows; ++i)</p>\'],[\'<p>for(space=1; space &lt;= rows-i; ++space)</p>\',\'<p>for(space=1; space &lt;= rows+i; ++space)</p>\',\'<p>for(space=1; space &lt;= rows-i; space+=2)</p>\'],[\'<p>if (count &lt;= rows)</p>\',\'<p>if (count &lt;= rows-1)</p>\',\'<p>if (count &lt;= rows+1)</p>\'],[\'<p>printf(\"%d \", (i-k+2*count1));</p><p>}</p><p>++k;</p><p>}</p><p>count1 = count = k = 0;</p><p>printf(\"\\n\");</p><p>}</p><p>return 0;</p><p>}</p>\',\'<p>printf(\"%d \", (i-k-2*count1));</p><p>}</p><p>++k;</p><p>}</p><p>count1 = count = k = 0;</p><p>printf(\"\\n\");</p><p>}</p><p>return 0;</p><p>}</p>\',\'<p>printf(\"%d \", (i+k-2*count1));</p><p>}</p><p>++k;</p><p>}</p><p>count1 = count = k = 0;</p><p>printf(\"\\n\");</p><p>}</p><p>return 0;</p><p>}</p>\']', '\'<p>scanf(\"%d\",&amp;rows);</p>\',\'<p>for(i=1; i&lt;=rows; ++i)</p>\',\'<p>for(space=1; space &lt;= rows-i; ++space)</p>\',\'<p>if (count &lt;= rows-1)</p>\',\'<p>printf(\"%d \", (i+k-2*count1));</p><p>}</p><p>++k;</p><p>}</p><p>count1 = count = k = 0;</p><p>printf(\"\\n\");</p><p>}</p><p>return 0;</p><p>}</p>\'', 'Pattern to print pascal triangle', NULL),
(26, '<p>#include &lt;stdio.h&gt;</p><p>int main()</p><p>{</p>', '\'<p>int n1, n2, i, gcd;</p><p>printf(\"Enter two integers: \");</p>\',\'<p>&nbsp;</p>\',\'<p>{</p>\'', '[\'<p>scanf(\"%d %d\", n1, n2);</p>\',\'<p>scanf(\"%f %f\", &amp;n1, &amp;n2);</p>\',\'<p>scanf(\"%d %d\", &amp;n1, &amp;n2);</p>\'],[\'<p>for(i=1; i &lt;= n1 || i &lt;= n2; ++i)</p>\',\'<p>for(i=0; i &lt;= n1 &amp;&amp; i &lt;= n2; ++i)</p>\',\'<p>for(i=1; i &lt;= n1 &amp;&amp; i &lt;= n2; ++i)</p>\'],[\'<p>if(n1%i==0 &amp;&amp; n2%i==0)</p><p>gcd = i;</p><p>}</p><p>printf(\"G.C.D of %d and %d is %d\", n1, n2, gcd);</p><p>return 0;</p><p>}</p>\',\'<p>if(n1%i!=0 &amp;&amp; n2%i!=0)</p><p>gcd = i;</p><p>}</p><p>printf(\"G.C.D of %d and %d is %d\", n1, n2, gcd);</p><p>return 0;</p><p>}</p>\',\'<p>if(n1%i==0 || n2%i==0)</p><p>gcd = i;</p><p>}</p><p>printf(\"G.C.D of %d and %d is %d\", n1, n2, gcd);</p><p>return 0;</p><p>}</p>\']', '\'<p>scanf(\"%d %d\", &amp;n1, &amp;n2);</p>\',\'<p>for(i=1; i &lt;= n1 &amp;&amp; i &lt;= n2; ++i)</p>\',\'<p>f(n1%i==0 &amp;&amp; n2%i==0)</p><p>gcd = i;</p><p>}</p><p>printf(\"G.C.D of %d and %d is %d\", n1, n2, gcd);</p><p>return 0;</p><p>}</p>\'', 'Program to find the GCD of two integers', NULL),
(27, '<p>#include&lt;stdio.h&gt;</p><p>&nbsp;</p><p>int isEven(int);</p><p>&nbsp;</p><p>int main()</p><p>{</p>', '\'<p>int n;</p>\',\'<p>&nbsp;</p>\',\'<p>&nbsp;</p>\',\'<p>{</p><p>&nbsp;printf(\"it is an even number\"); }</p><p>&nbsp;else</p><p>&nbsp;printf(\"it is an odd number\");</p><p>&nbsp;</p><p>printf(\"/n\");</p><p>&nbsp;return 0;</p><p>&nbsp;</p><p>}<br>int isEven(int n)</p><p>{</p>\',\'<p>return 1;</p><p>&nbsp;</p><p>else if(n==1)</p><p>&nbsp;return 0;</p><p>&nbsp;</p><p>else if(n&lt;0)</p>\'', '[\'<p>printf(\"enter a number\");</p>\',\'<p>printf(\"enter a number\");</p>\',\'<p>printf(\"enter a number\")</p>\'],[\'<p>scanf(\"%d\", &amp;n);</p>\',\'<p>scanf(\"%i\", n);</p>\',\'<p>scan(\"%d\", n);</p>\'],[\'<p>if(isEven(n))</p>\',\'<p>if(isEven(n));</p>\',\'<p>if isEven(n)</p>\'],[\'<p>if(n=0)</p>\',\'<p>if(n==0)</p>\',\'<p>if(n==0);</p>\'],[\'<p>return isEven(n)</p><p>else</p><p>&nbsp;</p><p>return isEven(n-2);</p><p>}</p>\',\'<p>return iseven(-n)</p><p>else</p><p>&nbsp;</p><p>return isEven(n-2);</p><p>}</p>\',\'<p>return isEven(-n);</p><p>else</p><p>&nbsp;</p><p>return isEven(n-2);</p><p>}</p>\']', '\'<p>printf(\"enter a number\");</p>\',\'<p>scanf(\"%d\", &amp;n);</p>\',\'<p>if(isEven(n))</p>\',\'<p>if(n==0)</p>\',\'<p>return isEven(-n);</p><p>else</p><p>&nbsp;</p><p>return isEven(n-2);</p><p>}</p>\'', 'Check if a number is even or not using recursion', NULL);

--
-- Indexes for dumped tables
--

--
-- Indexes for table `Admin`
--
ALTER TABLE `Admin`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `Leaderboard`
--
ALTER TABLE `Leaderboard`
  ADD PRIMARY KEY (`id`),
  ADD KEY `u_id` (`u_id`),
  ADD KEY `q_id` (`q_id`);

--
-- Indexes for table `Questions`
--
ALTER TABLE `Questions`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `Admin`
--
ALTER TABLE `Admin`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;
--
-- AUTO_INCREMENT for table `Leaderboard`
--
ALTER TABLE `Leaderboard`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT for table `Questions`
--
ALTER TABLE `Questions`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=28;
--
-- Constraints for dumped tables
--

--
-- Constraints for table `Leaderboard`
--
ALTER TABLE `Leaderboard`
  ADD CONSTRAINT `q_id` FOREIGN KEY (`q_id`) REFERENCES `Questions` (`id`),
  ADD CONSTRAINT `u_id` FOREIGN KEY (`u_id`) REFERENCES `Users` (`id`) ON DELETE CASCADE;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
